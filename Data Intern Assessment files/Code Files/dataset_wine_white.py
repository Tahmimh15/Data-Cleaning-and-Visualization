# -*- coding: utf-8 -*-
"""Dataset_Wine_White.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iB9RVDXs745URCHYTjhl6-BxQ50lRVHW
"""

#Name: Tahmim Hassan
#Email: tahmim93.hassan@gmail.com

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import seaborn as sns
import plotly.express as px

#feature_list has the names of all variables/column names in a list

file_1= pd.read_csv('winequality-white.csv')
feature_list= list(file_1.columns)
file_1

#Checking the number of null values:

file_1.isnull().sum()

''' Sometimes null values are not always in NaN form, they can be other forms like N/a, na etc.
so for checking for them here'''

missed_values= ["N/a", "na", np.nan]
file_1= pd.read_csv('winequality-white.csv', na_values= missed_values)

file_1.isnull().sum()

"""### **Duplicates:** There are duplicates of several entries in the file, so they have to be removed."""

#Total number of duplicate entries found
file_1.duplicated().sum()

#Dropping the duplicated entries (all columns have to match for two entries to be considered for duplication)
file_1.drop_duplicates()

'''The feature 'quality' is also changed to float data type to match the data types of the other features to maintain consistency'''

file_1['quality']= file_1.quality.astype(float)

#Used dtypes method to check the data type of all features in the dataset.

file_1.dtypes

"""## Removing **outlier** values and **noisy data points**:"""

#Displaying the statistical details of the dataset using 'describe' method:

file_1.describe()

file_1.shape

#Visualizing some outlier values:
# From the variable 'total sulfur dioxide'

'''So many datapoints are above the upper fence (upper limit) which means they are
extreme, outlier values'''

plot1= px.box(file_1, y="total sulfur dioxide")
plot1.show()

#Visualizing some outlier values:
# From the variable 'residual sugar'


plot1= px.box(file_1, y="residual sugar")
plot1.show()

#Finding and removing outliers using Inter-Quartile Range:
'''q_1= 25th percentile,  q_3= 75th percentile
  IQR= Q3- Q1'''
# file_2 is the copy of file_1. In this file, the processing of outliers will be done.

file_2= file_1.copy()


for item in feature_list:
  q_1= file_2[item].quantile(0.25)
  q_3= file_2[item].quantile(0.75)
  IQR= q_3- q_1

  lower_limit= q_1- (1.5*IQR)
  upper_limit= q_3+ (1.5*IQR)

  file_2= file_2[(file_2[item]>= lower_limit) & (file_2[item]<= upper_limit)]

# file_2 is now without any outlier values.
file_2

"""## **Section 2: Data Visualization**"""

#Number 1: Creating a bar chart to show distribution of a categorical variable

file_2["quality_categorical"]= pd.cut(file_2['quality'], bins= [0, 3, 6, float('Inf')],
                                      labels= ['Poor', 'Average', 'Good'])
file_2

sns.countplot(x ='quality_categorical', data = file_2, palette= "Set1")
plt.show()

#Number 2: A line plot to visualize the trend of a numerical variable over time.
#The trend of variable 'alcohol' is visualized here.


y_values= np.array(file_2['alcohol'])
plt.plot(y_values, color = 'g')
plt.show()

#The trend of variable 'pH' is visualized here.

y_values= np.array(file_2['pH'])
plt.plot(y_values, color = 'c')
plt.show()

#Number 3: Designing a scatter plot to explore the relationship between two numerical variables.
#Relationship of Total Sulfur Dioxide amount on the value of pH is visualized here (before outliers are removed).
'''From the visualization, we can some datapoints are clearly very different from the normal positioning of the datapoints.
This is due to the presence of outliers.'''

def scatter_plot(data_frame):
  matplotlib.rcParams['figure.figsize'] = (12, 10)
  plt.scatter(data_frame['total sulfur dioxide'], data_frame['pH'],color= 'indigo', s= 35)
  plt.xlabel("Total Sulfur Dioxide")
  plt.ylabel("Value of pH")

scatter_plot(file_1)

'''After outliers are removed,
the datapoints are more consistent now and more uniformly distributed without the presence of any extreme values'''


def scatter_plot(data_frame):
  matplotlib.rcParams['figure.figsize'] = (12, 10)
  plt.scatter(data_frame['total sulfur dioxide'], data_frame['pH'],color= 'indigo', s= 35)
  plt.xlabel("Total Sulfur Dioxide")
  plt.ylabel("Value of pH")

scatter_plot(file_2)

#Number 4: Pie Chart to represent the proportion of different categories in a dataset.
# Using the count of unique values of each category to represent its proportion.
'''Variable 'quality' is not included here as it is an qualitative variable,
and also makes a very small proportion of the total dataset'''


list1= list(file_2.columns)
count_list= []

for number in range(len(list1)-2):
  count= file_2[list1[number]].unique().size
  count_list.append(count)

plt.pie(count_list, labels= list1[:-2], autopct='%1.2f%%', colors= ["teal", "slateblue", "navy", "darkviolet", "turquoise", "springgreen",
                                                                    "gold", "steelblue"], shadow=True)
plt.show()

#Number5: Constructing a heatmap to visualize the correlation matrix of numerical variables.

data_correlation= file_2.corr()
sns.heatmap(data_correlation, annot= True, fmt='.3f', cmap = 'magma')
plt.title("Heatmap showing correlation matrix of all the numerical variables")

#Generating a Profile report using Pandas:

'''!pip install pandas-profiling

from pandas_profiling import ProfileReport
profile= ProfileReport(file_2)
profile.to_file(output_file ="report.html")'''